module Day2 where
import Data.List
import Data.Maybe
import Data.Char

inputTest, input :: [Game]
inputTest = [(1, [[(3,'B'), (4,'R')], [(1,'R'), (2,'G'), (6,'B')], [(2,'G')]]),(2, [[(1,'B'), (2,'G')], [(3,'G'), (4,'B'), (1,'R')], [(1,'G'), (1,'B')]]),(3, [[(8,'G'), (6,'B'), (20,'R')], [(5,'B'), (4,'R'), (13,'G')], [(5,'G'), (1,'R')]]),(4, [[(1,'G'), (3,'R'), (6,'B')], [(3,'G'), (6,'R')], [(3,'G'), (15,'B'), (14,'R')]]),(5, [[(6,'R'), (1,'B'), (3,'G')], [(2,'B'), (1,'R'), (2,'G')]])]
input = [(1,[[(4,'G'),( 2,'B')],[(1,'R'),( 1,'B'),( 4,'G')],[(3,'G'),( 4,'B'),( 1,'R')],[(7,'G'),( 2,'B'),( 4,'R')],[(3,'R'),( 7,'G')],[(3,'R'),( 3,'G')]]),(2,[[(1,'B'),( 11,'R'),( 1,'G')],[(3,'B'),( 2,'R'),( 4,'G')],[(11,'R'),( 2,'G'),( 2,'B')],[(13,'G'),( 5,'R'),( 1,'B')],[(4,'G'),( 8,'R'),( 3,'B')]]),(3,[[(9,'R'),( 2,'B')],[(4,'B'),( 2,'G'),( 1,'R')],[(7,'R'),( 4,'B'),( 3,'G')],[(3,'B'),( 6,'R')],[(9,'B'),( 4,'R')],[(3,'R')]]),(4,[[(5,'B'),( 11,'G'),( 3,'R')],[(6,'G'),( 3,'B'),( 7,'R')],[(17,'B'),( 9,'G')],[(1,'R'),( 5,'B'),( 3,'G')],[(6,'R'),( 7,'B'),( 4,'G')]]),(5,[[(3,'G'),( 7,'B'),( 7,'R')],[(6,'G'),( 3,'R'),( 4,'B')],[(7,'B'),( 4,'R')]]),(6,[[(1,'G'),( 3,'B')],[(2,'B'),( 9,'R')],[(2,'G'),( 13,'B'),( 11,'R')],[(7,'R'),( 12,'B'),( 1,'G')]]),(7,[[(2,'B'),( 6,'R'),( 12,'G')],[(7,'R'),( 8,'B'),( 6,'G')],[(7,'B'),( 3,'G'),( 7,'R')],[(5,'B'),( 9,'G'),( 13,'R')]]),(8,[[(13,'B'),( 1,'G')],[(3,'R'),( 9,'B')],[(3,'R'),( 4,'B')],[(2,'R'),( 3,'B'),( 1,'G')],[(1,'G'),( 15,'B'),( 4,'R')]]),(9,[[(1,'G'),( 5,'B'),( 11,'R')],[(2,'R'),( 1,'B')],[(2,'R'),( 5,'B')]]),(10,[[(8,'R'),( 20,'G')],[(12,'G'),( 1,'R'),( 2,'B')],[(5,'R'),( 3,'B'),( 7,'G')],[(4,'R'),( 19,'G'),( 6,'B')],[(3,'B'),( 4,'R'),( 14,'G')],[(9,'R'),( 15,'G')]]),(11,[[(7,'G'),( 4,'B'),( 14,'R')],[(7,'R'),( 8,'G')],[(6,'B'),( 6,'R')],[(5,'B'),( 10,'R'),( 11,'G')],[(12,'R'),( 2,'G')]]),(12,[[(4,'B'),( 5,'G'),( 8,'R')],[(2,'G'),( 4,'B'),( 7,'R')],[(4,'B'),( 3,'G'),( 2,'R')],[(2,'R'),( 4,'G')]]),(13,[[(7,'B'),( 8,'R')],[(5,'G'),( 15,'B'),( 2,'R')],[(7,'G'),( 3,'B'),( 12,'R')]]),(14,[[(4,'G'),( 16,'R')],[(6,'R'),( 2,'G')],[(5,'R'),( 1,'B'),( 3,'G')],[(1,'B'),( 1,'R'),( 2,'G')]]),(15,[[(3,'G')],[(2,'B'),( 1,'R'),( 2,'G')],[(6,'B')],[(3,'B'),( 1,'R'),( 2,'G')],[(2,'R'),( 1,'G')]]),(16,[[(13,'G'),( 3,'R')],[(9,'G'),( 1,'B')],[(4,'B'),( 1,'R'),( 18,'G')],[(2,'R'),( 3,'B'),( 7,'G')],[(17,'G'),( 2,'R'),( 3,'B')],[(12,'G'),( 2,'R')]]),(17,[[(2,'B'),( 4,'G'),( 3,'R')],[(2,'R'),( 5,'G'),( 11,'B')],[(5,'G'),( 15,'B'),( 2,'R')],[(3,'G'),( 13,'B')],[(6,'B'),( 2,'G'),( 2,'R')],[(8,'B'),( 1,'R')]]),(18,[[(6,'R'),( 4,'G'),( 7,'B')],[(2,'R'),( 3,'G'),( 12,'B')],[(3,'R'),( 6,'B'),( 6,'G')],[(9,'R'),( 10,'B')],[(6,'G'),( 4,'B'),( 2,'R')],[(12,'R'),( 12,'B'),( 9,'G')]]),(19,[[(3,'B'),( 2,'R'),( 3,'G')],[(16,'R'),( 3,'B'),( 5,'G')],[(2,'R'),( 6,'G')],[(3,'G'),( 2,'B'),( 15,'R')],[(2,'B'),( 13,'R'),( 1,'G')]]),(20,[[(2,'B')],[(1,'G'),( 5,'B'),( 2,'R')],[(3,'B'),( 2,'R'),( 1,'G')],[(1,'R'),( 2,'B')]]),(21,[[(15,'G'),( 13,'B'),( 4,'R')],[(9,'G'),( 6,'R'),( 19,'B')],[(6,'B'),( 1,'G'),( 1,'R')],[(1,'R'),( 11,'G'),( 9,'B')],[(3,'R'),( 14,'G'),( 8,'B')]]),(22,[[(3,'B'),( 10,'R'),( 1,'G')],[(2,'R'),( 6,'G')],[(9,'G'),( 3,'B'),( 4,'R')],[(2,'B'),( 4,'G')]]),(23,[[(5,'R'),( 2,'G'),( 5,'B')],[(4,'G'),( 12,'R'),( 2,'B')],[(3,'G'),( 8,'R'),( 4,'B')]]),(24,[[(1,'G'),( 16,'R'),( 3,'B')],[(10,'R'),( 1,'B')],[(2,'B'),( 1,'G'),( 7,'R')],[(12,'R'),( 1,'G')],[(14,'R'),( 1,'G')],[(1,'B'),( 8,'R'),( 1,'G')]]),(25,[[(8,'B'),( 9,'R'),( 6,'G')],[(2,'B'),( 4,'G'),( 8,'R')],[(1,'G'),( 9,'B'),( 2,'R')],[(14,'R'),( 4,'B')]]),(26,[[(4,'B'),( 3,'G')],[(1,'R'),( 3,'B')],[(6,'R'),( 2,'G'),( 6,'B')],[(5,'G'),( 2,'R')],[(5,'B'),( 5,'G')],[(6,'R'),( 1,'B')]]),(27,[[(6,'G'),( 9,'B')],[(1,'R'),( 6,'G'),( 8,'B')],[(3,'G'),( 1,'B'),( 1,'R')],[(3,'R'),( 4,'B')],[(2,'R'),( 2,'B')],[(4,'R'),( 3,'G'),( 7,'B')]]),(28,[[(5,'G'),( 2,'B')],[(5,'B')],[(1,'R'),( 4,'B'),( 3,'G')],[(1,'G'),( 2,'R')]]),(29,[[(1,'G'),( 2,'R'),( 4,'B')],[(1,'G'),( 2,'R'),( 1,'B')],[(9,'R'),( 6,'B')]]),(30,[[(1,'G'),( 1,'R'),( 5,'B')],[(13,'B'),( 4,'G'),( 2,'R')],[(10,'G'),( 11,'B')],[(9,'G'),( 2,'R'),( 12,'B')]]),(31,[[(4,'R'),( 5,'B')],[(8,'B'),( 1,'R'),( 1,'G')],[(4,'R'),( 5,'G')],[(3,'G')],[(9,'B'),( 2,'R'),( 7,'G')]]),(32,[[(5,'B'),( 4,'R'),( 5,'G')],[(10,'R'),( 10,'G'),( 5,'B')],[(10,'R'),( 12,'G'),( 6,'B')],[(8,'R'),( 1,'B'),( 13,'G')],[(6,'G'),( 14,'R'),( 2,'B')]]),(33,[[(9,'G'),( 6,'R'),( 4,'B')],[(1,'R'),( 2,'B'),( 13,'G')],[(4,'R'),( 4,'G'),( 5,'B')]]),(34,[[(1,'B'),( 1,'R')],[(9,'G'),( 14,'R'),( 1,'B')],[(3,'B'),( 7,'G')]]),(35,[[(1,'R'),( 11,'G'),( 5,'B')],[(1,'R'),( 5,'B'),( 17,'G')],[(19,'G'),( 6,'B')],[(4,'G'),( 7,'B')],[(10,'B'),( 7,'G')]]),(36,[[(9,'G'),( 6,'B'),( 4,'R')],[(8,'B'),( 13,'G'),( 1,'R')],[(5,'B'),( 5,'G')],[(15,'G'),( 1,'R')]]),(37,[[(1,'G'),( 9,'R'),( 1,'B')],[(14,'G')],[(11,'G'),( 6,'R')]]),(38,[[(2,'B')],[(9,'G'),( 1,'B'),( 8,'R')],[(4,'G'),( 1,'B'),( 3,'R')]]),(39,[[(7,'R'),( 7,'B')],[(3,'G'),( 6,'B'),( 2,'R')],[(3,'G'),( 4,'R')]]),(40,[[(5,'B'),( 2,'R'),( 6,'G')],[(6,'B'),( 10,'G'),( 4,'R')],[(8,'G'),( 6,'B')],[(3,'G'),( 2,'B')],[(2,'R'),( 14,'G')]]),(41,[[(5,'R'),( 14,'B'),( 3,'G')],[(3,'R'),( 3,'B'),( 7,'G')],[(19,'B'),( 15,'G'),( 6,'R')],[(5,'G'),( 18,'B')],[(1,'G'),( 7,'R'),( 9,'B')],[(14,'G'),( 10,'B'),( 1,'R')]]),(42,[[(2,'R'),( 3,'G')],[(2,'B'),( 3,'R')],[(15,'G'),( 1,'B')],[(2,'B'),( 15,'G'),( 1,'R')],[(7,'R'),( 15,'G')]]),(43,[[(4,'G'),( 6,'R'),( 9,'B')],[(4,'G'),( 3,'R'),( 18,'B')],[(6,'G'),( 7,'B')],[(4,'R'),( 7,'B')],[(8,'B'),( 7,'G'),( 1,'R')],[(5,'R'),( 14,'B')]]),(44,[[(2,'G'),( 11,'B')],[(1,'G'),( 5,'R'),( 8,'B')],[(4,'G'),( 17,'B'),( 4,'R')]]),(45,[[(6,'B'),( 3,'G'),( 2,'R')],[(8,'G'),( 12,'B'),( 3,'R')],[(13,'B'),( 11,'G')],[(13,'B'),( 9,'G')],[(2,'B'),( 3,'G'),( 3,'R')],[(2,'B'),( 10,'G')]]),(46,[[(14,'B'),( 12,'G'),( 3,'R')],[(2,'G'),( 1,'R'),( 10,'B')],[(5,'R'),( 7,'G')]]),(47,[[(15,'B'),( 1,'R')],[(1,'R'),( 14,'B')],[(1,'R'),( 16,'B')],[(3,'G'),( 8,'B')]]),(48,[[(1,'G'),( 3,'B'),( 1,'R')],[(8,'B'),( 2,'R'),( 8,'G')],[(14,'R'),( 4,'G'),( 11,'B')]]),(49,[[(6,'R'),( 5,'B'),( 2,'G')],[(3,'R'),( 11,'B')],[(1,'B'),( 14,'G'),( 6,'R')]]),(50,[[(7,'R'),( 7,'B')],[(7,'B'),( 7,'R')],[(13,'B'),( 1,'G'),( 2,'R')],[(7,'G'),( 5,'R'),( 9,'B')]]),(51,[[(4,'B'),( 9,'R'),( 1,'G')],[(16,'R')],[(2,'B'),( 6,'R')],[(11,'R'),( 6,'B')]]),(52,[[(4,'G'),( 4,'B'),( 9,'R')],[(5,'B'),( 4,'R'),( 16,'G')],[(16,'G'),( 3,'R')]]),(53,[[(2,'G'),( 12,'R')],[(2,'R'),( 5,'G'),( 15,'B')],[(9,'B'),( 17,'R'),( 9,'G')],[(2,'B'),( 6,'R'),( 4,'G')]]),(54,[[(2,'R'),( 3,'B'),( 5,'G')],[(8,'G'),( 3,'B')],[(9,'G'),( 3,'B'),( 3,'R')],[(1,'B'),( 4,'G')]]),(55,[[(6,'G'),( 11,'B'),( 12,'R')],[(10,'B'),( 6,'R'),( 13,'G')],[(7,'G'),( 9,'B')],[(10,'G'),( 20,'R'),( 7,'B')],[(9,'G'),( 14,'R'),( 8,'B')],[(14,'G'),( 15,'R')]]),(56,[[(1,'G'),( 8,'R'),( 1,'B')],[(1,'G'),( 3,'B'),( 13,'R')],[(5,'R'),( 3,'B')],[(5,'B'),( 16,'R')],[(12,'R'),( 4,'B')]]),(57,[[(7,'G'),( 5,'B')],[(13,'B')],[(1,'R'),( 11,'G'),( 4,'B')],[(1,'R'),( 7,'G'),( 5,'B')]]),(58,[[(14,'B'),( 6,'G'),( 9,'R')],[(7,'B'),( 1,'G'),( 11,'R')],[(3,'R'),( 9,'B'),( 6,'G')],[(4,'G'),( 2,'R')],[(2,'B'),( 6,'G')],[(11,'B'),( 1,'R')]]),(59,[[(6,'R'),( 1,'B'),( 5,'G')],[(4,'G')],[(15,'G')],[(7,'R'),( 1,'B'),( 12,'G')],[(7,'R'),( 1,'B'),( 3,'G')]]),(60,[[(3,'B'),( 6,'R'),( 2,'G')],[(7,'G'),( 6,'R'),( 4,'B')],[(3,'G'),( 1,'R'),( 4,'B')],[(3,'R'),( 1,'G')],[(9,'R'),( 5,'G'),( 4,'B')]]),(61,[[(1,'G'),( 3,'B')],[(1,'R'),( 2,'G')],[(1,'G'),( 2,'B'),( 2,'R')]]),(62,[[(10,'G'),( 15,'B'),( 14,'R')],[(11,'B'),( 11,'R'),( 16,'G')],[(5,'R'),( 5,'G'),( 12,'B')]]),(63,[[(2,'B'),( 5,'R')],[(7,'B'),( 2,'G'),( 2,'R')],[(2,'R'),( 1,'B')]]),(64,[[(9,'B'),( 12,'R'),( 4,'G')],[(5,'B'),( 13,'R')],[(1,'R'),( 2,'G'),( 7,'B')]]),(65,[[(4,'B'),( 8,'R')],[(13,'G'),( 8,'B'),( 5,'R')],[(1,'G'),( 5,'B'),( 7,'R')],[(11,'R'),( 7,'B'),( 10,'G')]]),(66,[[(8,'R'),( 17,'B')],[(1,'G'),( 9,'R'),( 7,'B')],[(12,'R')]]),(67,[[(14,'B'),( 12,'G'),( 3,'R')],[(12,'G')],[(9,'G'),( 13,'R'),( 15,'B')],[(2,'R'),( 10,'G'),( 1,'B')]]),(68,[[(11,'B'),( 14,'G')],[(14,'G')],[(9,'B'),( 7,'G'),( 1,'R')],[(9,'B'),( 7,'G')],[(17,'G'),( 2,'B')],[(4,'G'),( 4,'B')]]),(69,[[(4,'B'),( 14,'G'),( 6,'R')],[(11,'R'),( 7,'G'),( 10,'B')],[(4,'R'),( 8,'B'),( 8,'G')],[(7,'G'),( 6,'R'),( 7,'B')]]),(70,[[(12,'R'),( 16,'G'),( 11,'B')],[(16,'G'),( 15,'B'),( 5,'R')],[(10,'B'),( 1,'R'),( 12,'G')],[(9,'R'),( 8,'B'),( 4,'G')],[(2,'G'),( 8,'R'),( 3,'B')]]),(71,[[(8,'R'),( 1,'B'),( 5,'G')],[(12,'G'),( 7,'R')],[(11,'G'),( 1,'B'),( 7,'R')]]),(72,[[(5,'G'),( 15,'R')],[(7,'G'),( 3,'R'),( 4,'B')],[(10,'R'),( 1,'G')],[(6,'B'),( 15,'R'),( 3,'G')]]),(73,[[(1,'G'),( 5,'R'),( 1,'B')],[(6,'R'),( 3,'B'),( 6,'G')],[(11,'R'),( 1,'B')]]),(74,[[(5,'R')],[(1,'B'),( 3,'G'),( 3,'R')],[(2,'G'),( 7,'R')],[(1,'B'),( 2,'R')],[(3,'R'),( 1,'G')]]),(75,[[(13,'B'),( 20,'R'),( 10,'G')],[(3,'G'),( 5,'B'),( 14,'R')],[(9,'R'),( 13,'G'),( 7,'B')],[(1,'B'),( 15,'R'),( 2,'G')],[(11,'B'),( 2,'G'),( 17,'R')],[(11,'R'),( 13,'B'),( 13,'G')]]),(76,[[(9,'R'),( 7,'G'),( 2,'B')],[(7,'R'),( 2,'B'),( 8,'G')],[(4,'B'),( 3,'R'),( 9,'G')],[(4,'R'),( 1,'G')],[(1,'R'),( 2,'G'),( 3,'B')]]),(77,[[(5,'R'),( 2,'G'),( 15,'B')],[(12,'G'),( 4,'R'),( 2,'B')],[(10,'B'),( 6,'R'),( 9,'G')],[(7,'B'),( 3,'G')],[(16,'B'),( 4,'R'),( 5,'G')]]),(78,[[(11,'B'),( 3,'G'),( 19,'R')],[(3,'B'),( 1,'R')],[(8,'R'),( 14,'B'),( 3,'G')],[(8,'B'),( 8,'G'),( 16,'R')],[(8,'B'),( 14,'R')],[(12,'B'),( 11,'R'),( 2,'G')]]),(79,[[(10,'B'),( 5,'R'),( 1,'G')],[(3,'B'),( 13,'R')],[(15,'R'),( 1,'G')],[(4,'R'),( 6,'B'),( 1,'G')],[(1,'G'),( 6,'B')]]),(80,[[(7,'R'),( 1,'G'),( 1,'B')],[(1,'B'),( 4,'R'),( 3,'G')],[(2,'R'),( 2,'G')],[(7,'R'),( 1,'B'),( 1,'G')],[(2,'R'),( 1,'G'),( 3,'B')]]),(81,[[(12,'G'),( 2,'R'),( 8,'B')],[(1,'G'),( 1,'B'),( 1,'R')],[(7,'B'),( 1,'R'),( 11,'G')],[(1,'R'),( 12,'B'),( 4,'G')]]),(82,[[(18,'R'),( 5,'B'),( 4,'G')],[(6,'G'),( 11,'R')],[(11,'G'),( 18,'R'),( 5,'B')],[(4,'G'),( 17,'R'),( 4,'B')],[(5,'B'),( 14,'R'),( 15,'G')]]),(83,[[(4,'R'),( 6,'B'),( 6,'G')],[(9,'R'),( 4,'G')],[(8,'G'),( 7,'B')],[(2,'B'),( 9,'R'),( 13,'G')],[(2,'B'),( 9,'G'),( 11,'R')]]),(84,[[(15,'B')],[(4,'G'),( 1,'R'),( 15,'B')],[(2,'G'),( 16,'B')],[(3,'G'),( 14,'B')],[(16,'B')]]),(85,[[(3,'R'),( 7,'G'),( 8,'B')],[(3,'B'),( 17,'G'),( 7,'R')],[(13,'G'),( 4,'B')],[(6,'B'),( 8,'G')]]),(86,[[(16,'G'),( 6,'B')],[(12,'B'),( 9,'R'),( 11,'G')],[(17,'G'),( 4,'B'),( 8,'R')]]),(87,[[(6,'B'),( 3,'G'),( 13,'R')],[(13,'B')],[(12,'R'),( 2,'G'),( 1,'B')]]),(88,[[(6,'R'),( 2,'B')],[(16,'R'),( 13,'B'),( 1,'G')],[(2,'G'),( 11,'B'),( 2,'R')],[(12,'B'),( 9,'R'),( 1,'G')],[(5,'B'),( 2,'R'),( 2,'G')],[(18,'R'),( 3,'B')]]),(89,[[(6,'G'),( 5,'B')],[(4,'G'),( 4,'B')],[(3,'R'),( 5,'B')]]),(90,[[(3,'G'),( 8,'B')],[(2,'G'),( 7,'B'),( 9,'R')],[(8,'R'),( 2,'B'),( 4,'G')],[(1,'G'),( 3,'R'),( 7,'B')],[(4,'B'),( 4,'G'),( 2,'R')],[(9,'R'),( 3,'B'),( 3,'G')]]),(91,[[(9,'R'),( 12,'G'),( 1,'B')],[(11,'G'),( 9,'R'),( 2,'B')],[(1,'B'),( 8,'R'),( 4,'G')],[(6,'R'),( 9,'G')],[(2,'B'),( 10,'R'),( 1,'G')],[(2,'B'),( 15,'G'),( 13,'R')]]),(92,[[(3,'G'),( 11,'R'),( 16,'B')],[(8,'B'),( 1,'R'),( 6,'G')],[(4,'G'),( 1,'R'),( 5,'B')]]),(93,[[(9,'B'),( 3,'R'),( 13,'G')],[(2,'R'),( 9,'B')],[(3,'B'),( 17,'G'),( 5,'R')],[(4,'G'),( 8,'B')]]),(94,[[(2,'B'),( 3,'R'),( 9,'G')],[(4,'B'),( 1,'R'),( 6,'G')],[(8,'G'),( 2,'B')],[(4,'G'),( 2,'B'),( 7,'R')]]),(95,[[(5,'G'),( 3,'B')],[(4,'B'),( 3,'G'),( 8,'R')],[(3,'G'),( 4,'R'),( 3,'B')],[(2,'B'),( 4,'R')],[(9,'B'),( 5,'R'),( 3,'G')]]),(96,[[(11,'G')],[(10,'G'),( 5,'B'),( 11,'R')],[(5,'B'),( 13,'R'),( 15,'G')],[(10,'G'),( 1,'B'),( 11,'R')]]),(97,[[(5,'G'),( 6,'B'),( 1,'R')],[(7,'G'),( 1,'R')],[(5,'B')],[(3,'B'),( 1,'R')]]),(98,[[(1,'B'),( 5,'G'),( 7,'R')],[(3,'R'),( 5,'G'),( 1,'B')],[(4,'B'),( 8,'G'),( 2,'R')],[(4,'G'),( 1,'B'),( 6,'R')]]),(99,[[(12,'B'),( 8,'G')],[(2,'G')],[(3,'R'),( 7,'G'),( 5,'B')],[(1,'G'),( 1,'B'),( 2,'R')]]),(10,[[(4,'B'),( 14,'R')],[(12,'R'),( 1,'B')],[(2,'R'),( 2,'B')],[(8,'R')],[(14,'R'),( 2,'B'),( 1,'G')],[(3,'B')]])]
testSet :: Set
testSet = [(1,'R'), (2,'G'), (6,'B')]
testGame :: [Set]
testGame = [[(3,'B'), (4,'R')], [(1,'R'), (2,'G'), (6,'B')], [(2,'G')]]

type Game = (Int, [Set])
type Set = [(Int, Char)]
type Rgb = (Int, Int, Int)

getMaxRes :: [Set] -> Rgb
getMaxRes xs = getMaxRes' xs (0,0,0)

getMaxRes' :: [Set] -> Rgb -> Rgb
getMaxRes' [] rgb = rgb
getMaxRes' (x:xs) (r,g,b) = getMaxRes' xs  (max r xr, max g xg, max b xb)
                    where (xr, xg, xb) = getRgb x

getRgb :: Set -> Rgb
getRgb xs = getRgb' xs (0,0,0)

getRgb' ::  Set -> Rgb -> Rgb
getRgb' [] rgb = rgb
getRgb' (x:xs) (r,g,b) | c == 'R' = getRgb' xs (max r v, g, b)
                       | c == 'G' = getRgb' xs (r, max g v, b)
                       | c == 'B' = getRgb' xs (r, g, max b v)
                       | otherwise = (-1,-1,-1)
                        where (v, c) = x

isPossibleGame :: Game -> Bool
isPossibleGame (_,xs) = r <= 12 && g <= 13 && b <= 14
                    where (r,g,b) = getMaxRes xs

getPower :: Rgb -> Int
getPower (r,g,b) = r * g * b

part1, part2 ::  Int
part1 = sum $ map fst $ filter isPossibleGame input
part2 = sum $ map ((getPower . getMaxRes) . snd) input